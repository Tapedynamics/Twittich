// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String
  bio           String?
  avatar        String?
  coverImage    String?
  tradingStyle  String?   // Stile di trading (es: "Day Trading", "Swing Trading", etc.)
  isAdmin       Boolean   @default(false)

  // Trading stats (solo visualizzazione, calcolate dal sistema)
  winRate       Float?
  totalTrades   Int       @default(0)
  profitLoss    Float?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")
  liveSessions  LiveSession[]
  chatMessages  LiveChatMessage[]
  notifications Notification[]

  @@map("users")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id          String    @id @default(cuid())
  userId      String
  content     String
  mediaUrls   String?
  type        PostType  @default(TEXT)
  likesCount  Int       @default(0)
  commentsCount Int     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]

  @@map("posts")
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
  TRADE_IDEA
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}

model LiveSession {
  id            String          @id @default(cuid())
  broadcasterId String
  title         String
  description   String?
  status        LiveStatus      @default(SCHEDULED)
  startTime     DateTime?
  endTime       DateTime?
  viewersCount  Int             @default(0)
  peakViewers   Int             @default(0)
  recordingUrl  String?
  createdAt     DateTime        @default(now())

  broadcaster   User            @relation(fields: [broadcasterId], references: [id], onDelete: Cascade)
  chatMessages  LiveChatMessage[]

  @@map("live_sessions")
}

enum LiveStatus {
  SCHEDULED
  LIVE
  ENDED
}

model LiveChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  userId    String
  message   String
  createdAt DateTime @default(now())

  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("live_chat_messages")
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  type       NotificationType
  content    String
  read       Boolean          @default(false)
  relatedId  String?
  createdAt  DateTime         @default(now())

  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  NEW_FOLLOWER
  LIKE
  COMMENT
  LIVE_STARTED
  MENTION
}
